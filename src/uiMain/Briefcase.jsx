/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: luacc (https://sketchfab.com/luacc)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/death-stranding-briefcase-a302797e258742f394256c0fbb8396ef
title: Death Stranding Briefcase
*/

import { a, useSpring } from "@react-spring/three";
import { useGLTF } from "@react-three/drei";
import { memo, useEffect, useRef } from "react";
import { Vector3 } from "three";
import SelectedMaterial from "./materials/selectedMaterial";

useGLTF.preload("./model/briefcase.glb");

const PreBriefcase = ({ isSelected, position, ...props }) => {
  const ref = useRef();
  const positionRef = useRef(position);
  const defaultRotationX = Math.PI * 0.5;
  const defaultRotationY = Math.PI;
  const defaultRotationZ = 0;
  const [{ position: animatedPosition }, set] = useSpring(() => ({
    from: { position: [position[0], position[1] + 5, position[2]] },
    to: { position },
  }));

  useEffect(() => {
    if (positionRef.current.toString() !== position.toString()) {
      set(() => ({
        from: { position: [position[0], position[1] + 5, position[2]] },
        to: { position },
      }));
    }

    positionRef.current = position;
  }, [position, set]);

  const { nodes, materials } = useGLTF("./model/briefcase.glb");

  const valigiaMaterial = materials.Valigia;
  const manigliaMaterial = materials.Maniglia;

  const MainMaterial = isSelected
    ? (props) => <SelectedMaterial {...props} />
    : (props) => <meshStandardMaterial {...props} {...valigiaMaterial} />;

  return (
    <a.group
      position={animatedPosition}
      scale={new Vector3(0.009, 0.009, 0.009)}
      {...props}
      dispose={null}
    >
      <group rotation={[defaultRotationX, defaultRotationY, defaultRotationZ]}>
        <group position={[0, 0, 0]}>
          <group rotation={[0, 0, 0]}>
            <group>
              <mesh ref={ref} geometry={nodes.defaultMaterial.geometry}>
                <MainMaterial blue={0.4} transparent opacity={1} />
              </mesh>
              <mesh ref={ref} geometry={nodes.defaultMaterial.geometry}>
                <MainMaterial transparent opacity={1} wireframe />
              </mesh>
            </group>
            {!isSelected && (
              <>
                <mesh
                  material={manigliaMaterial}
                  geometry={nodes.defaultMaterial_1.geometry}
                />
                <mesh
                  material={valigiaMaterial}
                  geometry={nodes.defaultMaterial_2.geometry}
                />
                <mesh
                  material={valigiaMaterial}
                  geometry={nodes.defaultMaterial_3.geometry}
                />
                <mesh
                  material={manigliaMaterial}
                  geometry={nodes.defaultMaterial_4.geometry}
                />
                <mesh
                  material={valigiaMaterial}
                  geometry={nodes.defaultMaterial_5.geometry}
                />
                <mesh
                  material={valigiaMaterial}
                  geometry={nodes.defaultMaterial_6.geometry}
                />
                <mesh
                  material={valigiaMaterial}
                  geometry={nodes.defaultMaterial_7.geometry}
                />
                <mesh
                  material={valigiaMaterial}
                  geometry={nodes.defaultMaterial_8.geometry}
                />
              </>
            )}
          </group>
        </group>
      </group>
    </a.group>
  );
};

const Briefcase = memo(PreBriefcase, (prevProps, nextProps) => {
  if (!prevProps) return false;
  const { isSelected, position } = prevProps;
  return (
    isSelected === nextProps?.isSelected &&
    position.toString() === nextProps.position.toString()
  );
});

export default Briefcase;
